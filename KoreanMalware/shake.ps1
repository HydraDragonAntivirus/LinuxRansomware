Add-Type -TypeDefinition @"
using System;
using System.Runtime.InteropServices;
using System.Threading;

public class WindowShaker
{
    [DllImport("user32.dll")]
    public static extern IntPtr GetDesktopWindow();

    [DllImport("user32.dll")]
    public static extern bool EnumWindows(EnumWindowsProc enumProc, IntPtr lParam);

    [DllImport("user32.dll")]
    public static extern bool GetWindowRect(IntPtr hWnd, out RECT lpRect);

    [DllImport("user32.dll")]
    public static extern bool MoveWindow(IntPtr hWnd, int X, int Y, int nWidth, int nHeight, bool bRepaint);

    [StructLayout(LayoutKind.Sequential)]
    public struct RECT
    {
        public int Left;
        public int Top;
        public int Right;
        public int Bottom;
    }

    public delegate bool EnumWindowsProc(IntPtr hWnd, IntPtr lParam);

    public static bool EnumWindowCallback(IntPtr hWnd, IntPtr lParam)
    {
        RECT rect;
        GetWindowRect(hWnd, out rect);

        Random random = new Random();

        int direction = random.Next(4); 
        int amount = random.Next(10, 51); 

        int newX = rect.Left;
        int newY = rect.Top;

        switch (direction)
        {
            case 0:
                newX -= amount;
                break;
            case 1:
                newX += amount;
                break;
            case 2:
                newY -= amount;
                break;
            case 3: 
                newY += amount;
                break;
        }

        MoveWindow(hWnd, newX, newY, rect.Right - rect.Left, rect.Bottom - rect.Top, true);

        return true;
    }

    public static void ShakeAllWindows()
    {
        while (true)
        {
            EnumWindows(EnumWindowCallback, IntPtr.Zero);
        }
    }
}
"@

[WindowShaker]::ShakeAllWindows()
